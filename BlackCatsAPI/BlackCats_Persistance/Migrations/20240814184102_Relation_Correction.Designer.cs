// <auto-generated />
using System;
using BlackCats_Persistance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlackCats_Persistance.Migrations
{
    [DbContext(typeof(BCPSDbContext))]
    [Migration("20240814184102_Relation_Correction")]
    partial class Relation_Correction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BlackCats_Domain.Entities.AppFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ModuleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppFiles");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("AgreementDate")
                        .HasColumnType("date");

                    b.Property<Guid>("AgreementDocumentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SecurityDeposit")
                        .HasColumnType("int");

                    b.Property<int>("TotalEmployees")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AgreementDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<DateOnly>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("AadhaarNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("BankAccountNo")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("DateOfJoining")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfLeaving")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUniformFeePaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ResetCode")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af056936-524e-43d2-95ed-f746ca6ccb46"),
                            ContactNo = "7006342430",
                            CreatedAt = new DateTime(2024, 8, 15, 0, 11, 1, 713, DateTimeKind.Local).AddTicks(1018),
                            Email = "admin@gmail.com",
                            IsDeleted = false,
                            Name = "admin",
                            PasswordHash = new byte[] { 32, 28, 25, 64, 28, 65, 50, 32, 240, 111, 44, 102, 168, 149, 201, 158, 134, 3, 100, 37, 228, 27, 44, 87, 231, 110, 234, 125, 18, 94, 111, 32 },
                            PasswordSalt = new byte[] { 56, 189, 33, 185, 143, 23, 168, 6, 84, 73, 206, 75, 143, 135, 179, 3, 249, 50, 115, 117, 166, 69, 229, 252, 9, 111, 204, 107, 10, 222, 204, 50, 70, 7, 81, 201, 103, 132, 45, 201, 207, 18, 146, 180, 93, 159, 108, 188, 27, 84, 150, 3, 60, 89, 48, 71, 214, 8, 156, 12, 20, 107, 48, 159 },
                            UserName = "admin",
                            UserRole = 1,
                            UserStatus = 1
                        });
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Wages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("DailyWages")
                        .HasColumnType("int");

                    b.Property<int>("ESICDeduction")
                        .HasColumnType("int");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("NoOfWorkingDays")
                        .HasColumnType("int");

                    b.Property<int>("PFDeduction")
                        .HasColumnType("int");

                    b.Property<DateOnly>("WageMonth")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Wages");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Client", b =>
                {
                    b.HasOne("BlackCats_Domain.Entities.AppFile", "AgreementDocument")
                        .WithMany()
                        .HasForeignKey("AgreementDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackCats_Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgreementDocument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Contract", b =>
                {
                    b.HasOne("BlackCats_Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Employee", b =>
                {
                    b.HasOne("BlackCats_Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BlackCats_Domain.Entities.Wages", b =>
                {
                    b.HasOne("BlackCats_Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
